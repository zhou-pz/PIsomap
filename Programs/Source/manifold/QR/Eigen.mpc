from Compiler.library import *
from Compiler.sorting import *
from Compiler import mpc_math
from Compiler import topk
import numpy as np
program.use_trunc_pr = True # type: ignore

def array_sum(arr):
    size = len(arr)
    res = sfix(0)
    for i in range(size):
        res += arr[i]
    return res

def array_sum_sint(arr):
    size = len(arr)
    res = sint(0)
    for i in range(size):
        res += arr[i]
    return res

def eye(n):
    I = sfix.Matrix(n, n)
    @for_range(n)
    def _(i):
        I[i][i] = sfix(1)
    return I

def eye_mul_val(n, val):
    # shared val
    I = sfix.Matrix(n, n)
    @for_range(n)
    def _(i):
        I[i][i] = val
    return I

def norm(x):
    return mpc_math.sqrt(array_sum(x[:] * x[:]))

def normalization(x):
    return x[:] * mpc_math.InvertSqrt(array_sum(x[:] * x[:]))

def householder_qr(A):
    """
    利用 Householder 反射计算矩阵 A 的 QR 分解
    返回正交矩阵 Q 和上三角矩阵 R，使得 A = Q @ R
    """
    m, n = A.shape
    Q = sfix.Matrix(m, m)
    Q.assign(eye(m))

    for k in range(n):
    # @for_range(n)
    # def _(k):
        # 取 A[k:, k] 作为当前列向量
        x = A.transpose()[k][k:]
        x = sfix.Array(n - k).assign(x)
        # print_ln("A = %s", A.reveal())

        norm_x = norm(x)
        # if norm_x == 0: # 怎么处理
        #     continue

        # 确定反射向量，避免数值不稳定性（选择符号使得 u 的第一个分量为正）
        sign = (x[0] < 0).if_else(sfix(-1), sfix(1))
        u1 = x[0] + sign * norm_x
        v = Array.create_from(x)
        v[0] = u1
        # 归一化 v
        norm_v = norm(v)
        # if norm_v == 0:
        #     continue
        v = Matrix.create_from(v / norm_v)
        # v = Matrix.create_from(normalization(v))  # 精度不行

        
        # 构造 Householder 矩阵 H = I - 2 v v^T，作用在 A 的第 k 行及之后的部分
        vvT = sfix.Matrix(v.shape[0], v.shape[0])
        vvT.assign_vector(2 * v.direct_mul_trans(v))
        H_k = eye(m - k) - vvT
        # print_ln("H_k = %s", H_k.reveal())
    
        # 更新 A 的第 k 行及之后的部分：A[k:, k:] = H_k @ A[k:, k:]
        """
        t1: A的k~n行
        t2: t1的k~n列
        [:]把矩阵摊平成vector
        """
        t1 = A.get_part(k, n - k).transpose()
        # print_ln("t1 = %s", t1.reveal())
        t2 = t1.get_part(k, n - k).transpose()
        # print_ln("t2 = %s", t2.reveal())
        new_part = H_k.dot(t2)
        # print_ln("new_part = %s", new_part.reveal())
        # t2_ = t2.same_shape()
        # @for_range(t2_.shape[0])
        # def _(i):
        #     @for_range(t2_.shape[1])
        #     def _(j):
        #         t2_[i][j] = i * n + j
        # print_ln("t2_ = %s", t2_.reveal())
        t1.assign_part_vector(new_part.transpose()[:], k)
        # print_ln("t1 = %s", t1.reveal())
        A.assign_part_vector(t1.transpose()[:], k)
        # print_ln("A_' = %s", A.reveal())


        # 通过扩展 H_k 为全 m 维矩阵，更新 Q。注意：Q 乘上扩展后的 H_k
        H_full = sfix.Matrix(m, m)
        H_full.assign(eye(m))
        # H_full[k:, k:] = H_k
        h1 = H_full.get_part(k, n - k).transpose()
        h1.assign_part_vector(H_k.transpose()[:], k)
        H_full.assign_part_vector(h1.transpose()[:], k)

        # print_ln("Q %s:", k)
        # @for_range(Q.shape[0])
        # def _(i):
        #     print_ln("%s", Q[i].reveal())
        # print_ln("H_full %s:", k)
        # @for_range(H_full.shape[0])
        # def _(i):
        #     print_ln("%s", H_full[i].reveal())

        Q.assign(Q.dot(H_full))  # 最终 Q = H_full_0 * H_full_1 * ... * H_full_{n-1}

        # print_ln("Q %s:", k)
        # @for_range(Q.shape[0])
        # def _(i):
        #     print_ln("%s", Q[i].reveal())
    
    R = A
    return Q, R

def rayleigh_shift(A, v):
    """计算 Rayleigh 商作为移位参数"""
    a = v.direct_trans_mul(A).dot(v)
    b = v.direct_trans_mul(v)
    c = a / b
    return c
    # return v.direct_trans_mul(A).dot(v) / v.direct_trans_mul(v)

def qr_shift_eigen(A, tol=1e-2):
    """
    用 Rayleigh 移位的 QR 算法计算矩阵特征值和特征向量
    :param A: 方阵
    :param tol: 收敛容差
    :return: 近似特征值（对角线）和特征向量矩阵
    """
    n = A.shape[0]
    A_k = Matrix.create_from(A)
    Q_total = eye(n)
    max_iter = min(10 * n ** 2, 100)  # 最大迭代次数
    count = cint(0)

    # 生成随机向量 v 用于 Rayleigh 商计算
    vv = np.random.rand(n, 1)
    vv = sfix.input_tensor_via(0, vv)
    v = sfix.Matrix(n, 1)
    v.assign(vv)

    row, col = np.tril_indices(n, -1)
    row = row.tolist()
    col = col.tolist()
    ntril = len(row)

    # print_ln("A_k: %s", A_k.reveal())

    @for_range(max_iter)  
    def _(i):  
        count.iadd(1)
        mu = rayleigh_shift(A_k, v)
        # print_ln("mu %s", mu.reveal())
        
        # # QR 分解，计算 A_k - mu*I 的 QR 分解
        mu_mul_I = eye_mul_val(n, mu)
        Q, R = householder_qr(A_k - mu_mul_I)

        # print_ln("Q:")
        # @for_range(Q.shape[0])
        # def _(i):
        #     print_ln("%s", Q[i].reveal())
            
        # print_ln("R:")
        # @for_range(R.shape[0])
        # def _(i):
        #     print_ln("%s", R[i].reveal())

        # 更新 A_k 保持相似性：A_k+1 = R Q + mu I
        A_k.assign(R.dot(Q) + mu_mul_I)
        # 累积所有迭代中的正交变换
        Q_total.assign(Q_total.dot(Q))

        # 收敛判定：当 A_k 的下三角非对角部分均足够小时退出   （思考MPC-friendly收敛判定）
        # if np.all(np.abs(A_k[np.tril_indices(n, -1)]) < tol):
        #     break_loop()
        tril = sfix.Array(ntril)
        for i in range(ntril):
            tril[i] = A_k[row[i]][col[i]]
        offsets = abs(tril[:]) > sfix(tol)

        # print_ln("offsets: %s", offsets.reveal())

        @if_e(array_sum_sint(offsets).reveal())
        def _():
            ntril
        @else_
        def _():
            break_loop()

    print_ln("A_k:")
    @for_range(A_k.shape[0])
    def _(i):
        print_ln("%s", A_k[i].reveal())

    print_ln("迭代次数：%s", count)
    eigenvalues = A_k.diag()
    eigenvectors = Q_total
    return eigenvalues, eigenvectors

def verify_eigen(A, eigenvalues, eigenvectors, tol=1e-2):
    """
    验证特征值和特征向量的正确性：计算每个 (λ, v) 对的残差 ||Av - λv||
    """
    n = eigenvalues.shape[0]
    errors = []
    for i in range(n):
        lam = eigenvalues[i]
        v = eigenvectors[:, i].reshape(-1, 1)
        error = np.linalg.norm(A @ v - lam * v)
        errors.append(error)
    max_error = max(errors)
    print(f"Max Eigenvector Error: {max_error:.6e} {'✅' if max_error < tol else '❌'}")

# 主程序
np.random.seed(4536)
n = 10  # 矩阵维度
A = np.random.rand(n, n)
A = A + A.T  # 构造对称矩阵，保证实特征值
sfix.set_precision(21)
A = sfix.input_tensor_via(0, A)

# 使用自定义的 QR Shift 算法计算特征值与特征向量
# eigvals_qr, eigvecs_qr = qr_shift_eigen(A)
qr_shift_eigen(A)

# # 利用 NumPy 自带的 np.linalg.eig 进行比较
# eigvals_np, eigvecs_np = np.linalg.eig(A)

# print("\nVerification of QR Shift Results:")
# verify_eigen(A, eigvals_qr, eigvecs_qr)

# print("\nVerification of NumPy Results:")
# verify_eigen(A, eigvals_np, eigvecs_np)