# # from Compiler.library import *
# # import numpy as np

# # def patition(arr, low, high):
# #     i = MemValue(low-1)  # 使用 MemValue 来处理可变变量  i = MemValue(low-1)
# #     cc = Array(len(arr), sint)
# #     c = Array(len(arr), cint)
# #     idx = Array(len(arr), cint)

# #     # arr_pivot：arr[high] 的序列
# #     arr_pivot = Array(len(arr), sfix)
# #     @for_range(high - low)
# #     def _(j):
# #         idx[j] = cint(low + j)
# #         arr_pivot[low + j] = arr[high]
# #     idx.print_reveal_nested(end='\n')
# #     arr.print_reveal_nested(end='\n')

# #     print_ln('part: %s', arr.get_slice_vector(idx).reveal())

    
# #     # cc = arr[low : high] >= arr_pivot[low : high]
# #     # c.assign(cc.reveal())
# #     # # print_ln('c: %s', type(c))

# #     # # @for_range_opt(high - low)
# #     # # def _(j):
# #     # #     c[low  + j] = arr[low  + j] >= arr[high]
# #     # # c = c.reveal()
# #     # # print_ln('c: %s', type(c))
# #     # # c[low]

# #     # @for_range_opt(high - low)
# #     # def _(j):
# #     #     @if_(c[low  + j])
# #     #     def _():
# #     #         i.write(i.read() + 1)  # 使用 write/read 更新 i
# #     #         # print_ln('i = %s', i.read())
# #     #         temp = arr[i.read()]
# #     #         arr[i.read()] = arr[j + low]
# #     #         arr[j + low] = temp
# #     p = i.iadd(1)
# #     temp = arr[p]
# #     arr[p] = arr[high]
# #     arr[high] = temp
# #     # print_ln('p: %s', p.reveal())    
# #     return p

# # def quickSelect(arr, lo, hi, k):
# #     low = MemValue(lo)
# #     high = MemValue(hi)
# #     # 使arr键值唯一
# #     # shuffle
# #     i = MemValue(0)
# #     @do_while
# #     def _():    
# #         i.iadd(1)
# #         p = patition(arr, low, high)
# #         if p < (k-1):
# #             low = p.read() + 1
# #         else:
# #             high = p.read() - 1
# #         return i.read() != 1
# #         # return p.read() != (k-1)
# #     print_ln('循环次数: %s', i.reveal())

# # def topk(arr, k):
# #     quickSelect(arr, 0, len(arr)-1, k)
# #     return arr[:k]

# # num_samples = 10
# # arr = np.random.randint(0, 1001, size=(num_samples))
# # arr = sfix.input_tensor_via(0, arr)
# # # print_ln('arr:')
# # # arr.print_reveal_nested(end='\n')

# # # @for_range_opt(2)
# # # def _(j):
# # # # for i in range(num_samples1):
# # #     res = topk(arr, 5)
# # #     # arr.sort()

# # res = topk(arr, 5)
# # # print_ln('res: %s', res.reveal/())

# # # arr.sort()
# # # print_ln('asort:')
# # # arr.print_reveal_nested(end='\n')


# # # n = 10
# # # a = Array(n, sint)
# # # b = Array(n, sfix)
# # # idx = Array(5, cint)

# # # @for_range(n)
# # # def _(i):
# # #     b[i] = sfix(i)
# # # b.print_reveal_nested(end='\n')

# # # @for_range(5)
# # # def _(i):
# # #     idx[i] = cint(i + 3)
# # # idx.print_reveal_nested(end='\n')

# # # part = b.get_slice_vector(idx)
# # # print_ln('part: %s', part.reveal())


from Compiler.library import *
import numpy as np

def patition1(arr, low, high):
    """
    通信量少，但不完全并行
    """
    i = MemValue(low-1)  # 使用 MemValue 来处理可变变量
    c = Array(len(arr), sint)

    # n = 10 , buget = 3000, rounds = 85
    # n = 100, buget = 12000, rounds = 364
    # n = 100, buget = 52000, rounds = 196
    # n = 10000, buget = 5200000, rounds = 259
    @for_range_opt(high - low, budget=5200000) 
    def _(j):
        c[low  + j] = arr[low  + j] < arr[high]
    c = c.reveal()

    @for_range_opt(high - low)
    def _(j):
        @if_(c[low  + j])
        def _():
            i.write(i.read()+ 1)
            temp = arr[i.read()]
            arr[i.read()] = arr[j + low]
            arr[j + low] = temp
    p = i.iadd(1)
    temp = arr[p]
    arr[p] = arr[high]
    arr[high] = temp

    # print_ln('arr_parted:')
    # arr.print_reveal_nested(end='\n')

    return p


def patition2(arr, low, high):
    """
    通信量多，但完全并行
    """
    i = MemValue(low-1)  # 使用 MemValue 来处理可变变量  i = MemValue(low-1)
    cc = Array(len(arr), sint)
    c = Array(len(arr), cint)
    # c = Array(len(arr), sint)
    # idx = Array(len(arr), cint)

    # arr_pivot：arr[high] 的序列
    arr_pivot = Array(len(arr), sfix)
    arr_pivot.assign_all(arr[high])
    # @for_range(high - low)
    # def _(j):
    #     # idx[j] = cint(low + j)
    #     arr_pivot[low + j] = arr[high]
    # # idx.print_reveal_nested(end='\n')
    # arr_pivot.print_reveal_nested(end='\n')

    # print_ln('part: %s', arr.get_slice_vector(idx).reveal())

    # cc = arr[low : high] >= arr_pivot[low : high]
    cc = arr[:] >= arr_pivot[:]
    c.assign(cc.reveal())
    # print_ln('c: %s', c)

    # @for_range_opt(high - low)
    # def _(j):
    #     c[low  + j] = arr[low  + j] >= arr[high]
    # c = c.reveal()

    @for_range_opt(high - low)
    def _(j):
        @if_(c[low  + j])
        def _():
            i.write(i.read()+ 1)
            temp = arr[i.read()]
            arr[i.read()] = arr[j + low]
            arr[j + low] = temp
    p = i.iadd(1)
    # print_ln('p: %s', p)
    temp = arr[p]
    arr[p] = arr[high]
    arr[high] = temp
    return p

def quickSelect(arr, k):
    low = MemValue(0)
    high = MemValue(len(arr)-1)
    arr.secure_shuffle()
    i = MemValue(0)
    @do_while
    def _():    
        i.iadd(1)
        p = patition1(arr, low, high)
        # if p < (k-1):
        #     low.write(p.read() + 1)
        # else:
        #     high.write(p.read() - 1)
        @if_e(p < k)
        def _():
            low.write(p.read() + 1)
        @else_
        def _():    
            high.write(p.read() - 1)
        # return i.read() != 1
        # return (p.read() != (k+1)) & (p.read() != k)

        # print_ln('p: %s', p.read())
        # print_ln('arr_parted:')
        # arr.print_reveal_nested(end='\n')

        return (p.read() != (k-1)) & (p.read() != k)
    print_ln('num of patitions: %s', i.reveal())

def topk(arr, k):
    quickSelect(arr, k)
    return arr[:k]

num_samples = 10000
k = 50
np.random.seed(10)
arr = np.random.randint(0, 10001, size=(num_samples))
arr = sfix.input_tensor_via(0, arr)
arr2 = arr
# print_ln('arr:')
# arr.print_reveal_nested(end='\n')

res = topk(arr, k)

# @for_range_opt(num_samples)
# def _(j):
# for i in range(num_samples):
#     res = topk(arr, k)
#     arr.sort()

# arr2.sort()

# res = sfix.Array(k).assign(res)
# res.sort()

# carr = arr2[:k].reveal()
# cres = res.reveal()
# print_ln("res: %s", cres)
# print_ln("arr2: %s", carr)

# equal = 1
# for i in range(k):
#     @if_(carr[i] != cres[i])
#     def _():
#         equal = 0
# print_ln("equal: %s", equal)





# from Compiler.library import *
# n = 100
# arr = Array(n, sfix)
# arr2 = Array(n, sfix)
# c = Array(n, sint)
# low = MemValue(0)
# high = MemValue(n - 1)
# @for_range_opt(high - low, budget=5000000) 
# def _(j):
#     c[low  + j] = arr[low  + j] >= arr[high]

# c = arr[:] >= arr2[:]